---
import Layout from '../layouts/Layout.astro';
import "../styles/global.css";

// Lista de proyectos
const proyectoLs = [
  { 
    name: "PetFinder", 
    url: "/pet_finder.jpeg", 
    descripcion: "PetFinder es una webapp que permite a las personas dar en adopción o adoptar mascotas. Fue desarrollada en equipo utilizando Next.js, y participé activamente en el backend, bases de datos y frontend. También asumí el rol de Scrum Master, facilitando la organización del equipo y asegurando una comunicación efectiva durante el desarrollo."
  },
  { 
    name: "Better Than Slice", 
    url: "/bts_mockup.png", 
    descripcion: "Better Than Slice es un sistema de reparto de comida desarrollado en pareja, utilizando HTML, CSS, MongoDB y typestring. Durante el proyecto, me enfoqué en la lógica de negocio y la implementación de funcionalidades clave en backend y frontend, destacando mis habilidades en programación full-stack."
  }
];

---

<Layout title="Proyectos">
  <div class="container mx-auto p-4">
    <h1 class="text-3xl text-pink-500 font-bold mb-6 text-primary">Mis Proyectos</h1>
    <div class="grid grid-cols-1 md:grid-cols-1 lg:grid-cols-1 gap-6">
      
      {proyectoLs.map((proyecto) => (
        <div class="bg-white shadow-md rounded-lg overflow-hidden grid grid-cols-2" >
          <img src={proyecto.url} alt={proyecto.name} class="w-full h-full p-4 object-cover" />
          <div class="p-4">
            <h2 class="text-xl text-teal-500 font-semibold mb-2">{proyecto.name}</h2>
            <p class="text-gray-600">{proyecto.descripcion}</p>
          </div>
        </div>
      ))}
            <div class="bg-white shadow-md rounded-lg overflow-hidden grid grid-cols-2" >
              <img src="/Terraform.png" alt="Arquitectura Escalable para Comercio Digital" class="w-full h-full p-4 object-cover" />
              <div class="p-4">
                <h2 class="text-xl text-teal-500 font-semibold mb-2"> Arquitectura Escalable para Comercio Digital</h2>
                <p class="text-gray-600">Una organización enfocada al comercio en línea busca evolucionar su plataforma con miras a la escalabilidad y la flexibilidad. Han definido ciertos requerimientos que involucran ofrecer contenido estático, facilitar dos aplicaciones web distintas para los usuarios (pública y administrativa), manejar tareas en segundo plano, contar con un almacenamiento de archivos y un componente que acelere las consultas más frecuentes. El objetivo es que cada equipo investigue y proponga la manera de cumplir estos requerimientos a través de los servicios y la infraestructura que considere más adecuados. </p>
                <div class="mt-4">
                  <h3 class="font-semibold text-teal-500">Repositorios de GitHub</h3>
                  <ul class="list-none p-0">
                    <li><a href="https://github.com/FLesly/Repositorio_A.git" class="text-blue-500 hover:underline" target="_blank">Repositorio A</a></li>
                    <li><a href="https://github.com/FLesly/Repositorio_B.git" class="text-blue-500 hover:underline" target="_blank">Repositorio B</a></li>
                    <li><a href="https://github.com/FLesly/Repositorio_C.git" class="text-blue-500 hover:underline" target="_blank">Repositorio C</a></li>
                  </ul>
                </div>
              </div>
            </div>
            <div class="bg-white shadow-md rounded-lg overflow-hidden grid grid-cols-2" >
              <img src="/expertos.png" alt="Arquitectura Escalable para Comercio Digital" class="w-full h-full p-4 object-contain" />
              <section class="p-6 bg-white rounded-xl shadow-md">
  <h2 class="text-2xl text-teal-600 font-bold mb-4">Evolución del Generador de Reportes V1</h2>
  <p class="text-gray-700 mb-6 leading-relaxed">
    Desarrollé un sistema completo de generación de reportes que permite a los usuarios solicitar, gestionar y descargar informes detallados sobre Pokémon. 
    La aplicación utiliza una arquitectura moderna y desacoplada con microservicios desplegados en la nube de Azure, implementando patrones de procesamiento asíncrono 
    para manejar tareas intensivas sin bloquear la experiencia del usuario.
  </p>

  <h3 class="text-xl text-teal-500 font-semibold mb-2">Tecnologías Utilizadas</h3>
  <ul class="list-disc list-inside text-gray-700 mb-6 leading-relaxed">
    <li><strong>Frontend:</strong> Next.js (React) con Tailwind CSS y componentes shadcn/ui</li>
    <li><strong>Backend:</strong> API RESTful con FastAPI (Python)</li>
    <li><strong>Procesamiento Asíncrono:</strong> Azure Functions con Queue Triggers</li>
    <li><strong>Almacenamiento:</strong> Azure Blob Storage para archivos CSV, Azure Queue Storage para mensajes</li>
    <li><strong>Base de Datos:</strong> Azure SQL Database</li>
    <li><strong>API Externa:</strong> Integración con PokeAPI para obtención de datos</li>
  </ul>

  <h3 class="text-xl text-teal-500 font-semibold mb-2">Funcionalidades Implementadas</h3>
  <p class="text-gray-700 mb-6 leading-relaxed">
    Incluye la generación asíncrona de reportes de Pokémon en formato CSV, visualización interactiva con estados en tiempo real 
    y descarga mediante URLs firmadas. También cuenta con un sistema de eliminación de reportes y enriquecimiento de datos con 
    estadísticas detalladas de cada Pokémon.
  </p>

  <h3 class="text-xl text-teal-500 font-semibold mb-2">Desafíos y Soluciones</h3>
  <p class="text-gray-700 mb-6 leading-relaxed">
    Diseñé sistemas distribuidos usando tecnologías de Azure para lograr procesamiento asíncrono, gestión eficiente de recursos en la nube, 
    experiencia de usuario fluida y manejo robusto de datos externos. Implementé colas y funciones serverless, clases utilitarias para servicios cloud, 
    notificaciones en tiempo real y optimización de consultas a APIs, garantizando escalabilidad, eficiencia y una excelente experiencia de usuario.
  </p>

  <h3 class="text-xl text-teal-500 font-semibold mb-2">Repositorios de GitHub y URLs</h3>
  <ul class="list-disc list-inside text-blue-600 leading-relaxed">
    <li><a href="https://github.com/FLesly/poke.queue.api.git" class="text-blue-500 hover:underline" target="_blank">poke.queue.api</a></li>
                    <li><a href="https://github.com/FLesly/poke.queue.ui.git" class="text-blue-500 hover:underline" target="_blank">poke.queue.ui</a></li>
                    <li><a href="https://github.com/FLesly/poke.queue.function.git" class="text-blue-500 hover:underline" target="_blank">poke.queue.function</a></li>
                    <li><a href="https://github.com/FLesly/poke.terraform" class="text-blue-500 hover:underline" target="_blank">poke.terraform</a></li>
                    <li><a href="https://github.com/FLesly/poke.queue.sql.git" class="text-blue-500 hover:underline" target="_blank">poke.queue.sql</a></li>
                    <li><a href="https://api-pokequeue-dev2.azurewebsites.net/" class="text-blue-500 hover:underline" target="_blank">API</a></li>
                    <li><a href="https://ui-pokequeue-dev2.azurewebsites.net/" class="text-blue-500 hover:underline" target="_blank">UI</a></li>
  </ul>
</section>
                  
                </div>
              </div>
            </div>
    </div>
  </div>
</Layout>
